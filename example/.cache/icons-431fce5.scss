$disable-magic-sprite-selectors: false !default;
$sprite-selectors: hover, target, active, focus !default;
$default-sprite-separator: '-' !default;
$icons-sprite-base-class: '.icons-sprite' !default;
$icons-sprite-dimensions: false !default;
$icons-class-separator: $default-sprite-separator !default;
$icons-pixel-ratio: 2;
$icons-sprite-width: 192px;
$icons-sprite-height: 128px;

#{$icons-sprite-base-class} {
    background: url('../../images/foobar/icons@2x.png?_=431fce5') no-repeat;
}

$sprite-magic-icons: (
    chrome: (
        x: 64px, y: 0, width: 64px, height: 64px, hover: (x: 0, y: 0, width: 64px, height: 64px)
    ),
    firefox: (
        x: 64px, y: 64px, width: 64px, height: 64px, hover: (x: 0, y: 64px, width: 64px, height: 64px)
    ),
    ie: (
        x: 128px, y: 64px, width: 64px, height: 64px, hover: (x: 128px, y: 0, width: 64px, height: 64px)
    )
);

@function icons-sprite-width($sprite) {
    @return map-get(map-get($sprite-magic-icons, $sprite), 'width');
}

@function icons-sprite-height($sprite) {
    @return map-get(map-get($sprite-magic-icons, $sprite), 'height');
}

@mixin icons-sprite-dimensions($sprite) {
    width: #{icons-sprite-width($sprite) / $icons-pixel-ratio};
    height: #{icons-sprite-height($sprite) / $icons-pixel-ratio};
}

@mixin sprite-magic-background-position($sprite-data, $offset-x: 0, $offset-y: 0) {
    $x: $offset-x - map-get($sprite-data, 'x');
    $y: $offset-y - map-get($sprite-data, 'y');
    background-position: #{$x / $icons-pixel-ratio} #{$y / $icons-pixel-ratio};
}

@mixin icons-sprite-selectors(
    $sprite-name, $full-sprite-name, $offset-x: 0, $offset-y: 0,
    $unsupported: false, $separator: $icons-class-separator
) {
    $sprite-data: map-get($sprite-magic-icons, $sprite-name);
    @each $state in $sprite-selectors {
        @if map-has-key($sprite-data, $state) {
            $sprite-class: "#{$full-sprite-name}#{$separator}#{$state}";
            &:#{$state}, &.#{$sprite-class} {
                @include sprite-magic-background-position(map-get($sprite-data, $state), $offset-x, $offset-y);
            }
        }
    }
}

@mixin icons-sprite(
    $sprite, $dimensions: $icons-sprite-dimensions, $offset-x: 0, $offset-y: 0, $unsupported: false,
    $use-magic-selectors: not $disable-magic-sprite-selectors, $separator: $icons-class-separator
) {
    $sprite-data: map-get($sprite-magic-icons, $sprite);
    @extend #{$icons-sprite-base-class};
    @include sprite-magic-background-position($sprite-data, $offset-x, $offset-y);
    @if $icons-pixel-ratio != 1 {
        background-size: #{$icons-sprite-width / $icons-pixel-ratio} #{$icons-sprite-height / $icons-pixel-ratio}
    }
    @if $dimensions {
        @include icons-sprite-dimensions($sprite);
    }
    @if $use-magic-selectors {
        @include icons-sprite-selectors(
            $sprite, $sprite, $offset-x, $offset-y, $unsupported, $separator
        );
    }
}

@mixin all-icons-sprites($dimensions: $icons-sprite-dimensions) {
    .icons-chrome {
        @include icons-sprite(chrome, $dimensions);
    }
    .icons-firefox {
        @include icons-sprite(firefox, $dimensions);
    }
    .icons-ie {
        @include icons-sprite(ie, $dimensions);
    }
}
